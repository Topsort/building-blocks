/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppInvitationServiceApiModelsEntityType } from '../models';
// @ts-ignore
import { CreateInviteRequest } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { InvitesResponse } from '../models';
/**
 * InviteServiceApi - axios parameter creator
 * @export
 */
export const InviteServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint to create and send an invitation. The invitation is sent via email.
         * @summary Create Invite
         * @param {CreateInviteRequest} createInviteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createInviteRequest: CreateInviteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createInviteRequest' is not null or undefined
            assertParamExists('create', 'createInviteRequest', createInviteRequest)
            const localVarPath = `/invite-service/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInviteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to retrieve invite by key. Its expected usage is to prefill a signup form.
         * @summary Get Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (inviteKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteKey' is not null or undefined
            assertParamExists('getById', 'inviteKey', inviteKey)
            const localVarPath = `/invite-service/invite/{invite_key}`
                .replace(`{${"invite_key"}}`, encodeURIComponent(String(inviteKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to retrieve all the invites that target to an specific entity. Its expected usage is to display the active invites of vendors or marketplaces. Email filtering is available to get the invites to an specific email address.
         * @summary Get Invites
         * @param {AppInvitationServiceApiModelsEntityType} targetType 
         * @param {string} targetId 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTarget: async (targetType: AppInvitationServiceApiModelsEntityType, targetId: string, email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetType' is not null or undefined
            assertParamExists('getByTarget', 'targetType', targetType)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getByTarget', 'targetId', targetId)
            const localVarPath = `/invite-service/invites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (targetType !== undefined) {
                localVarQueryParameter['target_type'] = targetType;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to mark an invitation as invalid
         * @summary Invalidate Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidate: async (inviteKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteKey' is not null or undefined
            assertParamExists('invalidate', 'inviteKey', inviteKey)
            const localVarPath = `/invite-service/invite/{invite_key}/invalidate`
                .replace(`{${"invite_key"}}`, encodeURIComponent(String(inviteKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to mark an invitation as used. The invitee should mark it as used when signing up to Topsort.
         * @summary Update Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsUsed: async (inviteKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteKey' is not null or undefined
            assertParamExists('markAsUsed', 'inviteKey', inviteKey)
            const localVarPath = `/invite-service/invite/{invite_key}/used`
                .replace(`{${"invite_key"}}`, encodeURIComponent(String(inviteKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InviteServiceApi - functional programming interface
 * @export
 */
export const InviteServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InviteServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint to create and send an invitation. The invitation is sent via email.
         * @summary Create Invite
         * @param {CreateInviteRequest} createInviteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createInviteRequest: CreateInviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createInviteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to retrieve invite by key. Its expected usage is to prefill a signup form.
         * @summary Get Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(inviteKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(inviteKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to retrieve all the invites that target to an specific entity. Its expected usage is to display the active invites of vendors or marketplaces. Email filtering is available to get the invites to an specific email address.
         * @summary Get Invites
         * @param {AppInvitationServiceApiModelsEntityType} targetType 
         * @param {string} targetId 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByTarget(targetType: AppInvitationServiceApiModelsEntityType, targetId: string, email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvitesResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByTarget(targetType, targetId, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to mark an invitation as invalid
         * @summary Invalidate Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invalidate(inviteKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invalidate(inviteKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to mark an invitation as used. The invitee should mark it as used when signing up to Topsort.
         * @summary Update Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsUsed(inviteKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsUsed(inviteKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InviteServiceApi - factory interface
 * @export
 */
export const InviteServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InviteServiceApiFp(configuration)
    return {
        /**
         * Endpoint to create and send an invitation. The invitation is sent via email.
         * @summary Create Invite
         * @param {CreateInviteRequest} createInviteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createInviteRequest: CreateInviteRequest, options?: any): AxiosPromise<InvitesResponse> {
            return localVarFp.create(createInviteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to retrieve invite by key. Its expected usage is to prefill a signup form.
         * @summary Get Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(inviteKey: string, options?: any): AxiosPromise<InvitesResponse> {
            return localVarFp.getById(inviteKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to retrieve all the invites that target to an specific entity. Its expected usage is to display the active invites of vendors or marketplaces. Email filtering is available to get the invites to an specific email address.
         * @summary Get Invites
         * @param {AppInvitationServiceApiModelsEntityType} targetType 
         * @param {string} targetId 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTarget(targetType: AppInvitationServiceApiModelsEntityType, targetId: string, email?: string, options?: any): AxiosPromise<Array<InvitesResponse>> {
            return localVarFp.getByTarget(targetType, targetId, email, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to mark an invitation as invalid
         * @summary Invalidate Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidate(inviteKey: string, options?: any): AxiosPromise<void> {
            return localVarFp.invalidate(inviteKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to mark an invitation as used. The invitee should mark it as used when signing up to Topsort.
         * @summary Update Invite By Key
         * @param {string} inviteKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsUsed(inviteKey: string, options?: any): AxiosPromise<InvitesResponse> {
            return localVarFp.markAsUsed(inviteKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InviteServiceApi - object-oriented interface
 * @export
 * @class InviteServiceApi
 * @extends {BaseAPI}
 */
export class InviteServiceApi extends BaseAPI {
    /**
     * Endpoint to create and send an invitation. The invitation is sent via email.
     * @summary Create Invite
     * @param {CreateInviteRequest} createInviteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteServiceApi
     */
    public create(createInviteRequest: CreateInviteRequest, options?: AxiosRequestConfig) {
        return InviteServiceApiFp(this.configuration).create(createInviteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to retrieve invite by key. Its expected usage is to prefill a signup form.
     * @summary Get Invite By Key
     * @param {string} inviteKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteServiceApi
     */
    public getById(inviteKey: string, options?: AxiosRequestConfig) {
        return InviteServiceApiFp(this.configuration).getById(inviteKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to retrieve all the invites that target to an specific entity. Its expected usage is to display the active invites of vendors or marketplaces. Email filtering is available to get the invites to an specific email address.
     * @summary Get Invites
     * @param {AppInvitationServiceApiModelsEntityType} targetType 
     * @param {string} targetId 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteServiceApi
     */
    public getByTarget(targetType: AppInvitationServiceApiModelsEntityType, targetId: string, email?: string, options?: AxiosRequestConfig) {
        return InviteServiceApiFp(this.configuration).getByTarget(targetType, targetId, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to mark an invitation as invalid
     * @summary Invalidate Invite By Key
     * @param {string} inviteKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteServiceApi
     */
    public invalidate(inviteKey: string, options?: AxiosRequestConfig) {
        return InviteServiceApiFp(this.configuration).invalidate(inviteKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to mark an invitation as used. The invitee should mark it as used when signing up to Topsort.
     * @summary Update Invite By Key
     * @param {string} inviteKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteServiceApi
     */
    public markAsUsed(inviteKey: string, options?: AxiosRequestConfig) {
        return InviteServiceApiFp(this.configuration).markAsUsed(inviteKey, options).then((request) => request(this.axios, this.basePath));
    }
}
