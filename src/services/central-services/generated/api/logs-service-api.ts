/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LogDetail } from '../models';
// @ts-ignore
import { LogsResponse } from '../models';
// @ts-ignore
import { LogsSummary } from '../models';
/**
 * LogsServiceApi - axios parameter creator
 * @export
 */
export const LogsServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint to retrieve the details for a specific log. It is expected to be called from the logs page when the user clicks on a specific log entry, though those values could be prefetched.      Path Params:         marketplaceId -- The ID of the marketplace to fetch logs for.         logId -- The ID of the log to fetch.      Returns:         200 with the log entry and its details.         404 If no region info is found for the provided marketplace ID, or if no log is found for the provided marketplace ID/log ID.
         * @summary Get Log Detail From Marketplace
         * @param {string} marketplaceId 
         * @param {string} logId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogDetailFromMarketplace: async (marketplaceId: string, logId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getLogDetailFromMarketplace', 'marketplaceId', marketplaceId)
            // verify required parameter 'logId' is not null or undefined
            assertParamExists('getLogDetailFromMarketplace', 'logId', logId)
            const localVarPath = `/logs-service/{marketplace_id}/logs/{log_id}`
                .replace(`{${"marketplace_id"}}`, encodeURIComponent(String(marketplaceId)))
                .replace(`{${"log_id"}}`, encodeURIComponent(String(logId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a summary of how many requests occurred during a given period of time. The response comes as a structure of arrays to reduce the payload size.
         * @summary Get Log Summary From Marketplace
         * @param {string} marketplaceId The ID of the marketplace to search for.
         * @param {string} [start] The start of the period to be queried. Defaults to now - 2 weeks.
         * @param {string} [end] The end of the period to be queried. Defaults to now.
         * @param {number} [interval] The period of time each data point will aggregate, in minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogSummaryFromMarketplace: async (marketplaceId: string, start?: string, end?: string, interval?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getLogSummaryFromMarketplace', 'marketplaceId', marketplaceId)
            const localVarPath = `/logs-service/{marketplace_id}/logs-summary`
                .replace(`{${"marketplace_id"}}`, encodeURIComponent(String(marketplaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to retrieve a list of logs sorted by timestamp in descending order. It is expected to be called from the logs page with all defaults, and then more calls should be received as the user scrolls or sets filters.      Path Params:         marketplaceId -- The ID of the marketplace to fetch logs for.      Query Params:         method -- The HTTP request method(s). If none are set, no filtering by method will be done.         path -- The HTTP request path(s). If none are set, no filtering by path will be done.         status -- The returned HTTP status code(s). If none are set, no filtering by method will be done.         start -- The start of the time range to query. If unset, no lower bound will be used.         end -- The end of the time range to query. If unset, no upper bound will be used.         offset -- The number of log entries to skip.         limit -- The number of log entries to fetch.      Returns:         200 with the paginated list of logs.         404 if no region info is found for the provided marketplace ID.
         * @summary Get Logs From Marketplace
         * @param {string} marketplaceId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<number>} [status] 
         * @param {Array<string>} [path] 
         * @param {Array<string>} [method] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogsFromMarketplace: async (marketplaceId: string, offset?: number, limit?: number, status?: Array<number>, path?: Array<string>, method?: Array<string>, start?: string, end?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getLogsFromMarketplace', 'marketplaceId', marketplaceId)
            const localVarPath = `/logs-service/{marketplace_id}/logs`
                .replace(`{${"marketplace_id"}}`, encodeURIComponent(String(marketplaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }

            if (path) {
                localVarQueryParameter['path'] = path;
            }

            if (method) {
                localVarQueryParameter['method'] = method;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogsServiceApi - functional programming interface
 * @export
 */
export const LogsServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogsServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint to retrieve the details for a specific log. It is expected to be called from the logs page when the user clicks on a specific log entry, though those values could be prefetched.      Path Params:         marketplaceId -- The ID of the marketplace to fetch logs for.         logId -- The ID of the log to fetch.      Returns:         200 with the log entry and its details.         404 If no region info is found for the provided marketplace ID, or if no log is found for the provided marketplace ID/log ID.
         * @summary Get Log Detail From Marketplace
         * @param {string} marketplaceId 
         * @param {string} logId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogDetailFromMarketplace(marketplaceId: string, logId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogDetailFromMarketplace(marketplaceId, logId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a summary of how many requests occurred during a given period of time. The response comes as a structure of arrays to reduce the payload size.
         * @summary Get Log Summary From Marketplace
         * @param {string} marketplaceId The ID of the marketplace to search for.
         * @param {string} [start] The start of the period to be queried. Defaults to now - 2 weeks.
         * @param {string} [end] The end of the period to be queried. Defaults to now.
         * @param {number} [interval] The period of time each data point will aggregate, in minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogSummaryFromMarketplace(marketplaceId: string, start?: string, end?: string, interval?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogsSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogSummaryFromMarketplace(marketplaceId, start, end, interval, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to retrieve a list of logs sorted by timestamp in descending order. It is expected to be called from the logs page with all defaults, and then more calls should be received as the user scrolls or sets filters.      Path Params:         marketplaceId -- The ID of the marketplace to fetch logs for.      Query Params:         method -- The HTTP request method(s). If none are set, no filtering by method will be done.         path -- The HTTP request path(s). If none are set, no filtering by path will be done.         status -- The returned HTTP status code(s). If none are set, no filtering by method will be done.         start -- The start of the time range to query. If unset, no lower bound will be used.         end -- The end of the time range to query. If unset, no upper bound will be used.         offset -- The number of log entries to skip.         limit -- The number of log entries to fetch.      Returns:         200 with the paginated list of logs.         404 if no region info is found for the provided marketplace ID.
         * @summary Get Logs From Marketplace
         * @param {string} marketplaceId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<number>} [status] 
         * @param {Array<string>} [path] 
         * @param {Array<string>} [method] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogsFromMarketplace(marketplaceId: string, offset?: number, limit?: number, status?: Array<number>, path?: Array<string>, method?: Array<string>, start?: string, end?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogsFromMarketplace(marketplaceId, offset, limit, status, path, method, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogsServiceApi - factory interface
 * @export
 */
export const LogsServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogsServiceApiFp(configuration)
    return {
        /**
         * Endpoint to retrieve the details for a specific log. It is expected to be called from the logs page when the user clicks on a specific log entry, though those values could be prefetched.      Path Params:         marketplaceId -- The ID of the marketplace to fetch logs for.         logId -- The ID of the log to fetch.      Returns:         200 with the log entry and its details.         404 If no region info is found for the provided marketplace ID, or if no log is found for the provided marketplace ID/log ID.
         * @summary Get Log Detail From Marketplace
         * @param {string} marketplaceId 
         * @param {string} logId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogDetailFromMarketplace(marketplaceId: string, logId: string, options?: any): AxiosPromise<LogDetail> {
            return localVarFp.getLogDetailFromMarketplace(marketplaceId, logId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a summary of how many requests occurred during a given period of time. The response comes as a structure of arrays to reduce the payload size.
         * @summary Get Log Summary From Marketplace
         * @param {string} marketplaceId The ID of the marketplace to search for.
         * @param {string} [start] The start of the period to be queried. Defaults to now - 2 weeks.
         * @param {string} [end] The end of the period to be queried. Defaults to now.
         * @param {number} [interval] The period of time each data point will aggregate, in minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogSummaryFromMarketplace(marketplaceId: string, start?: string, end?: string, interval?: number, options?: any): AxiosPromise<LogsSummary> {
            return localVarFp.getLogSummaryFromMarketplace(marketplaceId, start, end, interval, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to retrieve a list of logs sorted by timestamp in descending order. It is expected to be called from the logs page with all defaults, and then more calls should be received as the user scrolls or sets filters.      Path Params:         marketplaceId -- The ID of the marketplace to fetch logs for.      Query Params:         method -- The HTTP request method(s). If none are set, no filtering by method will be done.         path -- The HTTP request path(s). If none are set, no filtering by path will be done.         status -- The returned HTTP status code(s). If none are set, no filtering by method will be done.         start -- The start of the time range to query. If unset, no lower bound will be used.         end -- The end of the time range to query. If unset, no upper bound will be used.         offset -- The number of log entries to skip.         limit -- The number of log entries to fetch.      Returns:         200 with the paginated list of logs.         404 if no region info is found for the provided marketplace ID.
         * @summary Get Logs From Marketplace
         * @param {string} marketplaceId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<number>} [status] 
         * @param {Array<string>} [path] 
         * @param {Array<string>} [method] 
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogsFromMarketplace(marketplaceId: string, offset?: number, limit?: number, status?: Array<number>, path?: Array<string>, method?: Array<string>, start?: string, end?: string, options?: any): AxiosPromise<LogsResponse> {
            return localVarFp.getLogsFromMarketplace(marketplaceId, offset, limit, status, path, method, start, end, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogsServiceApi - object-oriented interface
 * @export
 * @class LogsServiceApi
 * @extends {BaseAPI}
 */
export class LogsServiceApi extends BaseAPI {
    /**
     * Endpoint to retrieve the details for a specific log. It is expected to be called from the logs page when the user clicks on a specific log entry, though those values could be prefetched.      Path Params:         marketplaceId -- The ID of the marketplace to fetch logs for.         logId -- The ID of the log to fetch.      Returns:         200 with the log entry and its details.         404 If no region info is found for the provided marketplace ID, or if no log is found for the provided marketplace ID/log ID.
     * @summary Get Log Detail From Marketplace
     * @param {string} marketplaceId 
     * @param {string} logId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsServiceApi
     */
    public getLogDetailFromMarketplace(marketplaceId: string, logId: string, options?: AxiosRequestConfig) {
        return LogsServiceApiFp(this.configuration).getLogDetailFromMarketplace(marketplaceId, logId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a summary of how many requests occurred during a given period of time. The response comes as a structure of arrays to reduce the payload size.
     * @summary Get Log Summary From Marketplace
     * @param {string} marketplaceId The ID of the marketplace to search for.
     * @param {string} [start] The start of the period to be queried. Defaults to now - 2 weeks.
     * @param {string} [end] The end of the period to be queried. Defaults to now.
     * @param {number} [interval] The period of time each data point will aggregate, in minutes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsServiceApi
     */
    public getLogSummaryFromMarketplace(marketplaceId: string, start?: string, end?: string, interval?: number, options?: AxiosRequestConfig) {
        return LogsServiceApiFp(this.configuration).getLogSummaryFromMarketplace(marketplaceId, start, end, interval, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to retrieve a list of logs sorted by timestamp in descending order. It is expected to be called from the logs page with all defaults, and then more calls should be received as the user scrolls or sets filters.      Path Params:         marketplaceId -- The ID of the marketplace to fetch logs for.      Query Params:         method -- The HTTP request method(s). If none are set, no filtering by method will be done.         path -- The HTTP request path(s). If none are set, no filtering by path will be done.         status -- The returned HTTP status code(s). If none are set, no filtering by method will be done.         start -- The start of the time range to query. If unset, no lower bound will be used.         end -- The end of the time range to query. If unset, no upper bound will be used.         offset -- The number of log entries to skip.         limit -- The number of log entries to fetch.      Returns:         200 with the paginated list of logs.         404 if no region info is found for the provided marketplace ID.
     * @summary Get Logs From Marketplace
     * @param {string} marketplaceId 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {Array<number>} [status] 
     * @param {Array<string>} [path] 
     * @param {Array<string>} [method] 
     * @param {string} [start] 
     * @param {string} [end] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsServiceApi
     */
    public getLogsFromMarketplace(marketplaceId: string, offset?: number, limit?: number, status?: Array<number>, path?: Array<string>, method?: Array<string>, start?: string, end?: string, options?: AxiosRequestConfig) {
        return LogsServiceApiFp(this.configuration).getLogsFromMarketplace(marketplaceId, offset, limit, status, path, method, start, end, options).then((request) => request(this.axios, this.basePath));
    }
}
