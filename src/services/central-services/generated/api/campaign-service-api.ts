/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiKey } from '../models';
// @ts-ignore
import { Bid } from '../models';
// @ts-ignore
import { BidCreateRequest } from '../models';
// @ts-ignore
import { BidUpdateRequest } from '../models';
// @ts-ignore
import { BidsResponse } from '../models';
// @ts-ignore
import { Campaign } from '../models';
// @ts-ignore
import { CampaignCreateRequest } from '../models';
// @ts-ignore
import { CampaignStatus } from '../models';
// @ts-ignore
import { CampaignUpdateRequest } from '../models';
// @ts-ignore
import { CampaignsBehaviorDataByDayResponse } from '../models';
// @ts-ignore
import { CampaignsResponse } from '../models';
// @ts-ignore
import { GetApiKeyResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { MarketplaceReportResponse } from '../models';
/**
 * CampaignServiceApi - axios parameter creator
 * @export
 */
export const CampaignServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Api Key
         * @param {string} marketplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (marketplaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('createApiKey', 'marketplaceId', marketplaceId)
            const localVarPath = `/campaign-service/marketplaces/{marketplace_id}/api_keys`
                .replace(`{${"marketplace_id"}}`, encodeURIComponent(String(marketplaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Campaign Bids
         * @param {string} campaignId 
         * @param {BidCreateRequest} bidCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBid: async (campaignId: string, bidCreateRequest: BidCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('createBid', 'campaignId', campaignId)
            // verify required parameter 'bidCreateRequest' is not null or undefined
            assertParamExists('createBid', 'bidCreateRequest', bidCreateRequest)
            const localVarPath = `/campaign-service/campaign/{campaign_id}/bids`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bidCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to create campaign, campaign\'s budget and campaign\'s bids. It is expected to use at all types of campaign creations.
         * @summary Create Campaign
         * @param {string} vendorId 
         * @param {string} marketplaceId 
         * @param {string} externalVendorId 
         * @param {CampaignCreateRequest} campaignCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign: async (vendorId: string, marketplaceId: string, externalVendorId: string, campaignCreateRequest: CampaignCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('createCampaign', 'vendorId', vendorId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('createCampaign', 'marketplaceId', marketplaceId)
            // verify required parameter 'externalVendorId' is not null or undefined
            assertParamExists('createCampaign', 'externalVendorId', externalVendorId)
            // verify required parameter 'campaignCreateRequest' is not null or undefined
            assertParamExists('createCampaign', 'campaignCreateRequest', campaignCreateRequest)
            const localVarPath = `/campaign-service/campaign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vendorId !== undefined) {
                localVarQueryParameter['vendor_id'] = vendorId;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplace_id'] = marketplaceId;
            }

            if (externalVendorId !== undefined) {
                localVarQueryParameter['external_vendor_id'] = externalVendorId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Api Key
         * @param {string} apiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: async (apiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('deleteApiKey', 'apiKey', apiKey)
            const localVarPath = `/campaign-service/marketplaces/{api_key}/api_keys`
                .replace(`{${"api_key"}}`, encodeURIComponent(String(apiKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Campaign Bid By Id
         * @param {string} campaignId 
         * @param {string} bidId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBid: async (campaignId: string, bidId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('deleteBid', 'campaignId', campaignId)
            // verify required parameter 'bidId' is not null or undefined
            assertParamExists('deleteBid', 'bidId', bidId)
            const localVarPath = `/campaign-service/campaign/{campaign_id}/bid/{bid_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"bid_id"}}`, encodeURIComponent(String(bidId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to delete specific campaign by campaign_id. It is soft delete.
         * @summary Delete Campaign By Id
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaign: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('deleteCampaign', 'campaignId', campaignId)
            const localVarPath = `/campaign-service/campaign/{campaign_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Api Keys
         * @param {string} marketplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeys: async (marketplaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getApiKeys', 'marketplaceId', marketplaceId)
            const localVarPath = `/campaign-service/marketplaces/{marketplace_id}/api_keys`
                .replace(`{${"marketplace_id"}}`, encodeURIComponent(String(marketplaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Campaign Bids
         * @param {string} campaignId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBids: async (campaignId: string, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getBids', 'campaignId', campaignId)
            const localVarPath = `/campaign-service/campaign/{campaign_id}/bids`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (behaviorSummaryStartDate !== undefined) {
                localVarQueryParameter['behavior_summary_start_date'] = (behaviorSummaryStartDate as any instanceof Date) ?
                    (behaviorSummaryStartDate as any).toISOString() :
                    behaviorSummaryStartDate;
            }

            if (behaviorSummaryEndDate !== undefined) {
                localVarQueryParameter['behavior_summary_end_date'] = (behaviorSummaryEndDate as any instanceof Date) ?
                    (behaviorSummaryEndDate as any).toISOString() :
                    behaviorSummaryEndDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Campaigns Bids
         * @param {Array<string>} requestBody 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidsForMultipleCampaigns: async (requestBody: Array<string>, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('getBidsForMultipleCampaigns', 'requestBody', requestBody)
            const localVarPath = `/campaign-service/campaigns/bids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (behaviorSummaryStartDate !== undefined) {
                localVarQueryParameter['behavior_summary_start_date'] = (behaviorSummaryStartDate as any instanceof Date) ?
                    (behaviorSummaryStartDate as any).toISOString() :
                    behaviorSummaryStartDate;
            }

            if (behaviorSummaryEndDate !== undefined) {
                localVarQueryParameter['behavior_summary_end_date'] = (behaviorSummaryEndDate as any instanceof Date) ?
                    (behaviorSummaryEndDate as any).toISOString() :
                    behaviorSummaryEndDate;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to retrieve specific campaign by campaign_id. It is expected to use at Campaign Page
         * @summary Get Campaign By Id
         * @param {string} campaignId 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign: async (campaignId: string, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaign', 'campaignId', campaignId)
            const localVarPath = `/campaign-service/campaign/{campaign_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (behaviorSummaryStartDate !== undefined) {
                localVarQueryParameter['behavior_summary_start_date'] = (behaviorSummaryStartDate as any instanceof Date) ?
                    (behaviorSummaryStartDate as any).toISOString() :
                    behaviorSummaryStartDate;
            }

            if (behaviorSummaryEndDate !== undefined) {
                localVarQueryParameter['behavior_summary_end_date'] = (behaviorSummaryEndDate as any instanceof Date) ?
                    (behaviorSummaryEndDate as any).toISOString() :
                    behaviorSummaryEndDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to retrieve campaigns, campaigns could be filtered by marketplace_id, vendor_id and status. It is expected to use for getting all campaigns of a marketplace & all campaigns of a vendor in dashboards. Filtering by status is expected to use at review page getting campaigns approved, pending tabs
         * @summary Get Campaigns
         * @param {string} marketplaceId 
         * @param {string} [vendorId] 
         * @param {CampaignStatus} [status] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaigns: async (marketplaceId: string, vendorId?: string, status?: CampaignStatus, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getCampaigns', 'marketplaceId', marketplaceId)
            const localVarPath = `/campaign-service/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplace_id'] = marketplaceId;
            }

            if (vendorId !== undefined) {
                localVarQueryParameter['vendor_id'] = vendorId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (behaviorSummaryStartDate !== undefined) {
                localVarQueryParameter['behavior_summary_start_date'] = (behaviorSummaryStartDate as any instanceof Date) ?
                    (behaviorSummaryStartDate as any).toISOString() :
                    behaviorSummaryStartDate;
            }

            if (behaviorSummaryEndDate !== undefined) {
                localVarQueryParameter['behavior_summary_end_date'] = (behaviorSummaryEndDate as any instanceof Date) ?
                    (behaviorSummaryEndDate as any).toISOString() :
                    behaviorSummaryEndDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Campaigns Daily Summaries
         * @param {Array<string>} requestBody 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsDailyReports: async (requestBody: Array<string>, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('getCampaignsDailyReports', 'requestBody', requestBody)
            const localVarPath = `/campaign-service/campaigns/daily-reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (behaviorSummaryStartDate !== undefined) {
                localVarQueryParameter['behavior_summary_start_date'] = (behaviorSummaryStartDate as any instanceof Date) ?
                    (behaviorSummaryStartDate as any).toISOString() :
                    behaviorSummaryStartDate;
            }

            if (behaviorSummaryEndDate !== undefined) {
                localVarQueryParameter['behavior_summary_end_date'] = (behaviorSummaryEndDate as any instanceof Date) ?
                    (behaviorSummaryEndDate as any).toISOString() :
                    behaviorSummaryEndDate;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Marketplace Report
         * @param {string} marketplaceId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplaceReport: async (marketplaceId: string, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getMarketplaceReport', 'marketplaceId', marketplaceId)
            const localVarPath = `/campaign-service/campaigns/marketplace-report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplace_id'] = marketplaceId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (behaviorSummaryStartDate !== undefined) {
                localVarQueryParameter['behavior_summary_start_date'] = (behaviorSummaryStartDate as any instanceof Date) ?
                    (behaviorSummaryStartDate as any).toISOString() :
                    behaviorSummaryStartDate;
            }

            if (behaviorSummaryEndDate !== undefined) {
                localVarQueryParameter['behavior_summary_end_date'] = (behaviorSummaryEndDate as any instanceof Date) ?
                    (behaviorSummaryEndDate as any).toISOString() :
                    behaviorSummaryEndDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Campaign Bid By Id
         * @param {string} campaignId 
         * @param {string} bidId 
         * @param {BidUpdateRequest} bidUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBid: async (campaignId: string, bidId: string, bidUpdateRequest: BidUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('updateBid', 'campaignId', campaignId)
            // verify required parameter 'bidId' is not null or undefined
            assertParamExists('updateBid', 'bidId', bidId)
            // verify required parameter 'bidUpdateRequest' is not null or undefined
            assertParamExists('updateBid', 'bidUpdateRequest', bidUpdateRequest)
            const localVarPath = `/campaign-service/campaign/{campaign_id}/bid/{bid_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"bid_id"}}`, encodeURIComponent(String(bidId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bidUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to update specific campaign\'s fields by campaign_id some. Notice that: this is PATCH endpoint, not needed all fields at request, fields to be updated is enough at request. It is expected to use for updating campaign\'s data at campaign page
         * @summary Update Campaign By Id
         * @param {string} campaignId 
         * @param {CampaignUpdateRequest} campaignUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaign: async (campaignId: string, campaignUpdateRequest: CampaignUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('updateCampaign', 'campaignId', campaignId)
            // verify required parameter 'campaignUpdateRequest' is not null or undefined
            assertParamExists('updateCampaign', 'campaignUpdateRequest', campaignUpdateRequest)
            const localVarPath = `/campaign-service/campaign/{campaign_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignServiceApi - functional programming interface
 * @export
 */
export const CampaignServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Api Key
         * @param {string} marketplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(marketplaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(marketplaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Campaign Bids
         * @param {string} campaignId 
         * @param {BidCreateRequest} bidCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBid(campaignId: string, bidCreateRequest: BidCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBid(campaignId, bidCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to create campaign, campaign\'s budget and campaign\'s bids. It is expected to use at all types of campaign creations.
         * @summary Create Campaign
         * @param {string} vendorId 
         * @param {string} marketplaceId 
         * @param {string} externalVendorId 
         * @param {CampaignCreateRequest} campaignCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaign(vendorId: string, marketplaceId: string, externalVendorId: string, campaignCreateRequest: CampaignCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaign(vendorId, marketplaceId, externalVendorId, campaignCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Api Key
         * @param {string} apiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiKey(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiKey(apiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Campaign Bid By Id
         * @param {string} campaignId 
         * @param {string} bidId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBid(campaignId: string, bidId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBid(campaignId, bidId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to delete specific campaign by campaign_id. It is soft delete.
         * @summary Delete Campaign By Id
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCampaign(campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCampaign(campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Api Keys
         * @param {string} marketplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiKeys(marketplaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKeys(marketplaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Campaign Bids
         * @param {string} campaignId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBids(campaignId: string, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBids(campaignId, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Campaigns Bids
         * @param {Array<string>} requestBody 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBidsForMultipleCampaigns(requestBody: Array<string>, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBidsForMultipleCampaigns(requestBody, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to retrieve specific campaign by campaign_id. It is expected to use at Campaign Page
         * @summary Get Campaign By Id
         * @param {string} campaignId 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaign(campaignId: string, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaign(campaignId, behaviorSummaryStartDate, behaviorSummaryEndDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to retrieve campaigns, campaigns could be filtered by marketplace_id, vendor_id and status. It is expected to use for getting all campaigns of a marketplace & all campaigns of a vendor in dashboards. Filtering by status is expected to use at review page getting campaigns approved, pending tabs
         * @summary Get Campaigns
         * @param {string} marketplaceId 
         * @param {string} [vendorId] 
         * @param {CampaignStatus} [status] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaigns(marketplaceId: string, vendorId?: string, status?: CampaignStatus, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaigns(marketplaceId, vendorId, status, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Campaigns Daily Summaries
         * @param {Array<string>} requestBody 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignsDailyReports(requestBody: Array<string>, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsBehaviorDataByDayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignsDailyReports(requestBody, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Marketplace Report
         * @param {string} marketplaceId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketplaceReport(marketplaceId: string, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarketplaceReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketplaceReport(marketplaceId, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Campaign Bid By Id
         * @param {string} campaignId 
         * @param {string} bidId 
         * @param {BidUpdateRequest} bidUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBid(campaignId: string, bidId: string, bidUpdateRequest: BidUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBid(campaignId, bidId, bidUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to update specific campaign\'s fields by campaign_id some. Notice that: this is PATCH endpoint, not needed all fields at request, fields to be updated is enough at request. It is expected to use for updating campaign\'s data at campaign page
         * @summary Update Campaign By Id
         * @param {string} campaignId 
         * @param {CampaignUpdateRequest} campaignUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaign(campaignId: string, campaignUpdateRequest: CampaignUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampaign(campaignId, campaignUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignServiceApi - factory interface
 * @export
 */
export const CampaignServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Api Key
         * @param {string} marketplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(marketplaceId: string, options?: any): AxiosPromise<ApiKey> {
            return localVarFp.createApiKey(marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Campaign Bids
         * @param {string} campaignId 
         * @param {BidCreateRequest} bidCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBid(campaignId: string, bidCreateRequest: BidCreateRequest, options?: any): AxiosPromise<BidsResponse> {
            return localVarFp.createBid(campaignId, bidCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to create campaign, campaign\'s budget and campaign\'s bids. It is expected to use at all types of campaign creations.
         * @summary Create Campaign
         * @param {string} vendorId 
         * @param {string} marketplaceId 
         * @param {string} externalVendorId 
         * @param {CampaignCreateRequest} campaignCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign(vendorId: string, marketplaceId: string, externalVendorId: string, campaignCreateRequest: CampaignCreateRequest, options?: any): AxiosPromise<Campaign> {
            return localVarFp.createCampaign(vendorId, marketplaceId, externalVendorId, campaignCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Api Key
         * @param {string} apiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey(apiKey: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiKey(apiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Campaign Bid By Id
         * @param {string} campaignId 
         * @param {string} bidId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBid(campaignId: string, bidId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBid(campaignId, bidId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to delete specific campaign by campaign_id. It is soft delete.
         * @summary Delete Campaign By Id
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaign(campaignId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteCampaign(campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Api Keys
         * @param {string} marketplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeys(marketplaceId: string, options?: any): AxiosPromise<GetApiKeyResponse> {
            return localVarFp.getApiKeys(marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Campaign Bids
         * @param {string} campaignId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBids(campaignId: string, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: any): AxiosPromise<BidsResponse> {
            return localVarFp.getBids(campaignId, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Campaigns Bids
         * @param {Array<string>} requestBody 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidsForMultipleCampaigns(requestBody: Array<string>, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: any): AxiosPromise<BidsResponse> {
            return localVarFp.getBidsForMultipleCampaigns(requestBody, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to retrieve specific campaign by campaign_id. It is expected to use at Campaign Page
         * @summary Get Campaign By Id
         * @param {string} campaignId 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign(campaignId: string, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: any): AxiosPromise<Campaign> {
            return localVarFp.getCampaign(campaignId, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to retrieve campaigns, campaigns could be filtered by marketplace_id, vendor_id and status. It is expected to use for getting all campaigns of a marketplace & all campaigns of a vendor in dashboards. Filtering by status is expected to use at review page getting campaigns approved, pending tabs
         * @summary Get Campaigns
         * @param {string} marketplaceId 
         * @param {string} [vendorId] 
         * @param {CampaignStatus} [status] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaigns(marketplaceId: string, vendorId?: string, status?: CampaignStatus, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: any): AxiosPromise<CampaignsResponse> {
            return localVarFp.getCampaigns(marketplaceId, vendorId, status, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Campaigns Daily Summaries
         * @param {Array<string>} requestBody 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsDailyReports(requestBody: Array<string>, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: any): AxiosPromise<CampaignsBehaviorDataByDayResponse> {
            return localVarFp.getCampaignsDailyReports(requestBody, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Marketplace Report
         * @param {string} marketplaceId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [behaviorSummaryStartDate] 
         * @param {string} [behaviorSummaryEndDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplaceReport(marketplaceId: string, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: any): AxiosPromise<MarketplaceReportResponse> {
            return localVarFp.getMarketplaceReport(marketplaceId, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Campaign Bid By Id
         * @param {string} campaignId 
         * @param {string} bidId 
         * @param {BidUpdateRequest} bidUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBid(campaignId: string, bidId: string, bidUpdateRequest: BidUpdateRequest, options?: any): AxiosPromise<Bid> {
            return localVarFp.updateBid(campaignId, bidId, bidUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to update specific campaign\'s fields by campaign_id some. Notice that: this is PATCH endpoint, not needed all fields at request, fields to be updated is enough at request. It is expected to use for updating campaign\'s data at campaign page
         * @summary Update Campaign By Id
         * @param {string} campaignId 
         * @param {CampaignUpdateRequest} campaignUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaign(campaignId: string, campaignUpdateRequest: CampaignUpdateRequest, options?: any): AxiosPromise<Campaign> {
            return localVarFp.updateCampaign(campaignId, campaignUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignServiceApi - object-oriented interface
 * @export
 * @class CampaignServiceApi
 * @extends {BaseAPI}
 */
export class CampaignServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create Api Key
     * @param {string} marketplaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public createApiKey(marketplaceId: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).createApiKey(marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Campaign Bids
     * @param {string} campaignId 
     * @param {BidCreateRequest} bidCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public createBid(campaignId: string, bidCreateRequest: BidCreateRequest, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).createBid(campaignId, bidCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to create campaign, campaign\'s budget and campaign\'s bids. It is expected to use at all types of campaign creations.
     * @summary Create Campaign
     * @param {string} vendorId 
     * @param {string} marketplaceId 
     * @param {string} externalVendorId 
     * @param {CampaignCreateRequest} campaignCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public createCampaign(vendorId: string, marketplaceId: string, externalVendorId: string, campaignCreateRequest: CampaignCreateRequest, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).createCampaign(vendorId, marketplaceId, externalVendorId, campaignCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Api Key
     * @param {string} apiKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public deleteApiKey(apiKey: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).deleteApiKey(apiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Campaign Bid By Id
     * @param {string} campaignId 
     * @param {string} bidId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public deleteBid(campaignId: string, bidId: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).deleteBid(campaignId, bidId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to delete specific campaign by campaign_id. It is soft delete.
     * @summary Delete Campaign By Id
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public deleteCampaign(campaignId: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).deleteCampaign(campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Api Keys
     * @param {string} marketplaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public getApiKeys(marketplaceId: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).getApiKeys(marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Campaign Bids
     * @param {string} campaignId 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [behaviorSummaryStartDate] 
     * @param {string} [behaviorSummaryEndDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public getBids(campaignId: string, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).getBids(campaignId, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Campaigns Bids
     * @param {Array<string>} requestBody 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [behaviorSummaryStartDate] 
     * @param {string} [behaviorSummaryEndDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public getBidsForMultipleCampaigns(requestBody: Array<string>, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).getBidsForMultipleCampaigns(requestBody, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to retrieve specific campaign by campaign_id. It is expected to use at Campaign Page
     * @summary Get Campaign By Id
     * @param {string} campaignId 
     * @param {string} [behaviorSummaryStartDate] 
     * @param {string} [behaviorSummaryEndDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public getCampaign(campaignId: string, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).getCampaign(campaignId, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to retrieve campaigns, campaigns could be filtered by marketplace_id, vendor_id and status. It is expected to use for getting all campaigns of a marketplace & all campaigns of a vendor in dashboards. Filtering by status is expected to use at review page getting campaigns approved, pending tabs
     * @summary Get Campaigns
     * @param {string} marketplaceId 
     * @param {string} [vendorId] 
     * @param {CampaignStatus} [status] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [behaviorSummaryStartDate] 
     * @param {string} [behaviorSummaryEndDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public getCampaigns(marketplaceId: string, vendorId?: string, status?: CampaignStatus, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).getCampaigns(marketplaceId, vendorId, status, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Campaigns Daily Summaries
     * @param {Array<string>} requestBody 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [behaviorSummaryStartDate] 
     * @param {string} [behaviorSummaryEndDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public getCampaignsDailyReports(requestBody: Array<string>, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).getCampaignsDailyReports(requestBody, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Marketplace Report
     * @param {string} marketplaceId 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [behaviorSummaryStartDate] 
     * @param {string} [behaviorSummaryEndDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public getMarketplaceReport(marketplaceId: string, offset?: number, limit?: number, behaviorSummaryStartDate?: string, behaviorSummaryEndDate?: string, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).getMarketplaceReport(marketplaceId, offset, limit, behaviorSummaryStartDate, behaviorSummaryEndDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Campaign Bid By Id
     * @param {string} campaignId 
     * @param {string} bidId 
     * @param {BidUpdateRequest} bidUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public updateBid(campaignId: string, bidId: string, bidUpdateRequest: BidUpdateRequest, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).updateBid(campaignId, bidId, bidUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to update specific campaign\'s fields by campaign_id some. Notice that: this is PATCH endpoint, not needed all fields at request, fields to be updated is enough at request. It is expected to use for updating campaign\'s data at campaign page
     * @summary Update Campaign By Id
     * @param {string} campaignId 
     * @param {CampaignUpdateRequest} campaignUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignServiceApi
     */
    public updateCampaign(campaignId: string, campaignUpdateRequest: CampaignUpdateRequest, options?: AxiosRequestConfig) {
        return CampaignServiceApiFp(this.configuration).updateCampaign(campaignId, campaignUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
